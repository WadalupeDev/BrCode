<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="bunifuThinButton21.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAFYAAAAjCAYAAAAOuf2FAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJPSURBVGhD7ZrPSxRhGMf7Fzp0EMJQMnd2dmfntztr2A8v
        2ak85akfl8SD0C3oIASCUHjQQ+cOCQqKgoIHwYOHkCAiiCDqEHmxLtVpb9/8zoyTw05L7sx72ucDX1iY
        3YX5zLvP+77Pu2d834ek+IhYRRGxiiJiFUXEKoqIVZS2Yj3Pg1a1oNkBBq0AF8ouzvZqXRvePz3QR+nI
        i+tle2P+KbZSc9BX8XHn/iRWN7aw93ofX78doJvh/dPD5vYOHkw9Qn91CLrpZvprEcunoDsN3BifwOH3
        H/FXCln8/PUbdx9Oo3Q0gh3XS3lMiaXUS2aAl0sr8UeF/2Fndw9G/Ros5+/oTYnlSBWpncESwfrbIpY1
        lT9/oXMez8xCt06I5ezPiUpqaj6azSbMxmhYEkKxXDpwlhPy83zhBTQzHrFcl3EJIeTn/YePuGgMRWJZ
        Bj59/hJfEvLAcnCuvxqJ7RmohWsyoRi4SwvF8oVQHCJWEYlY1gTWBqEYErHs2nR7g6VIErFsInC/K+SH
        qyuusiKxhoMnT+fiS0IeXq2sQbPqkVhuwTR3ROpsAdyauIeyYUdimaoTYGb2WXxZ6ITl1Q3o7nC6u8VG
        TNm9jDdv38VvE04DG1gDZiM5rknEMiwJteC6bG9PCaVeGbuNimknLlNiGcNywlOEufnF+GNCO9Y3t8OR
        elIq0yKWYVnQ7Tqu3hwPZznp06ZhX4UHrDxoZU3NOq3NFHscPgUuHc6X7HDRK4nCphVbrfxrQJY3pq1Y
        SecRsYoiYhVFxCqKiFUSH38AFikGS2g7OLYAAAAASUVORK5CYII=
</value>
  </data>
  <data name="lbVariable1.Text" xml:space="preserve">
    <value>Para poder ingresar las palabras nativas de Java, será necesario el uso de atajos. Estos atajos serán definidos por combinaciones de números, los cuales serán ingresados desde el Num Pad del teclado. Dichos atajos están categorizados y son los siguientes:</value>
  </data>
  <data name="label30.Text" xml:space="preserve">
    <value>Este compilador está adaptado para que personas con alguna discapacidad visual sean capaces de poder programar, por ende, a continuación se mostrará la forma en la que dicho compilador estará trabajando y las indicaciones de uso del teclado. Este programa tiene integrada la tecnología Text to Speech, por lo cual será más fácil para el usuario interpretar este instructivo. </value>
  </data>
  <data name="label31.Text" xml:space="preserve">
    <value>Las teclas tienen un color de etiqueta definido, dicho color tiene un significado para que sea más fácil identificar las teclas que se desean usar. 
A continuación se mostrará el significado de dichos colores:

● Rosa: Signos de puntuación.
● Rojo: Funciones de teclado.
● Verde: Alfabeto.
● Amarillo: Num Pad.
● Morado: Flechas de movimiento.
● Azul: Números qwerty.</value>
  </data>
  <data name="label29.Text" xml:space="preserve">
    <value>La programación estructurada es un paradigma de programación orientado a mejorar la claridad, calidad y tiempo de desarrollo de un programa utilizando únicamente subrutinas o funciones y tres estructuras: secuencial, condicional y repetitiva.

Se basaban en el teorema del programa estructurado, propuesto por Böhm-Jacopini, que demuestra que todo programa puede escribirse utilizando únicamente las tres estructuras de control siguientes:

● Estructura secuencial:
Está formada por una secuencia de llamadas a instrucciones del lenguaje o funciones del programador

● Estructura condicional:
Es aquella que ejecuta una estructura si se cumple una condición booleana.

● Estructura iterativa con condición:
Es aquella que ejecuta una estructura una y otra vez si se cumple una condición booleana.</value>
  </data>
  <data name="lbJavaText.Text" xml:space="preserve">
    <value>Java es un lenguaje de programación multiplataforma orientado a objetos que se ejecuta en miles de millones de dispositivos de todo el mundo.

Java es un lenguaje de programación muy transferible que se usa en plataformas y diferentes tipos de dispositivos, desde smartphones hasta televisores inteligentes. Se usa para crear aplicaciones móviles y web, software empresarial, dispositivos de Internet de las cosas (IoT), juegos, macrodatos, aplicaciones distribuidas y basadas en la nube, entre otros tipos

Cabe destacar que aunque Java es un lenguaje de programación orientada a objetos, también podemos aplicar programación estructurada, la cual es la programación recomendada para que usuarios principiantes se introduzcan a lo que es lenguaje.</value>
  </data>
</root>